{"version":3,"sources":["webpack://grading/./lib/components/assignments/assignment-list.component.js","webpack://grading/./lib/components/assignments/assignment.component.js","webpack://grading/./lib/components/assignments/courses.component.js","webpack://grading/./lib/components/coursemanage/coursemanage.component.js","webpack://grading/./lib/components/coursemanage/coursemanageassignment-list.component.js","webpack://grading/./lib/components/coursemanage/coursemanageassignment.component.js","webpack://grading/./lib/components/grading/grading.js","webpack://grading/./lib/index.js","webpack://grading/./lib/services/assignments.service.js","webpack://grading/./lib/services/lectures.service.js","webpack://grading/./lib/services/request.service.js","webpack://grading/./lib/services/submissions.service.js","webpack://grading/./lib/widgets/assignment-list.js","webpack://grading/./lib/widgets/coursemanage.js","webpack://grading/./lib/widgets/grading.js"],"names":[],"mappings":"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AAa,4CAA4C;AACzD,aAAa,gDAAgD;AAC7D,aAAa,gDAAgD;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gDAAmB,CAAC,uFAAM,GAAG,oCAAoC;AAC1G,aAAa;AACb,aAAa,kDAAkD;AAC/D;AACA;AACA;AACA,+BAA+B,8EAAe;AAC9C,4BAA4B,sEAAU;AACtC;AACA,uBAAuB,sBAAsB;AAC7C,QAAQ,gFAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wBAAwB,0CAA0C;AAClE;AACA;AACA,+CAA+C,YAAY,8EAA8E,EAAE,EAAE;AAC7I;AACA;AACA;AACA,gBAAgB,gDAAmB,SAAS,SAAS,2DAA2D,EAAE;AAClH,YAAY,gDAAmB,CAAC,4DAAQ,GAAG,oGAAoG;AAC/I,YAAY,gDAAmB,CAAC,uFAAM,GAAG,8DAA8D,mEAAmE,EAAE;AAC5K;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DuE;AACtB;AACK;AACI;AACM;AACL;AACX;AAChD,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA,CAAC,sDAAsD;AACvD;AACA;AACA;AACA;AACA,CAAC,wDAAwD;AACzD;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AACxC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,2DAAS,EAAE,gEAAc;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mEAAgB;AACxD,0CAA0C,gEAAc,EAAE,uBAAuB;AACjF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,kBAAkB,gEAAS;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oEAAc;AACzD,6CAA6C,gEAAc,EAAE,0BAA0B;AACvF;AACA;AACA;AACA;AACA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","file":"lib_index_js-webpack_sharing_consume_default_jupyterlab_statedb-webpack_sharing_consume_defau-d707a1.b4b8d0ec817a5ed1040a.js","sourcesContent":["import * as React from 'react';\nimport { getAllAssignments } from '../../services/assignments.service';\nimport { Collapse } from '@jupyterlab/ui-components';\nimport { AssignmentComponent } from './assignment.component';\nimport { Icon } from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\nexport class AssignmentsComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false,\n            assignments: new Array()\n        };\n        this.toggleOpen = () => {\n            this.setState({ isOpen: !this.state.isOpen });\n        };\n        this.lecture = props.lecture;\n        this.state.isOpen = props.open || false;\n    }\n    componentDidMount() {\n        getAllAssignments(this.lecture.id).subscribe(assignments => {\n            this.setState(this.state.assignments = assignments);\n        });\n    }\n    render() {\n        return React.createElement(\"div\", { className: \"AssignmentsComponent\" },\n            React.createElement(\"div\", { onClick: this.toggleOpen, className: \"collapse-header\" },\n                React.createElement(Icon, { icon: IconNames.LEARNING, className: \"flavor-icon\" }),\n                this.lecture.name,\n                React.createElement(Icon, { iconSize: Icon.SIZE_LARGE, icon: IconNames.CHEVRON_DOWN, className: `collapse-icon ${this.state.isOpen ? \"collapse-icon-open\" : \"\"}` })),\n            React.createElement(Collapse, { isOpen: this.state.isOpen, className: \"collapse-body\", transitionDuration: 300, keepChildrenMounted: true },\n                React.createElement(\"ul\", null, this.state.assignments.map((el, index) => React.createElement(AssignmentComponent, { index: index, lecture: this.lecture, assignment: el })))));\n    }\n}\n","import * as React from 'react';\nimport { Icon, Collapse, Button, Intent } from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport { GlobalObjects } from '../../index';\nimport { showErrorMessage, showDialog, Dialog } from '@jupyterlab/apputils';\nimport { getSubmissions, submitAssignment } from '../../services/submissions.service';\nimport { fetchAssignment } from '../../services/assignments.service';\nexport class AssignmentComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.iconSize = 14;\n        this.state = {\n            filesOpen: false,\n            submissionsOpen: true,\n            submissions: new Array()\n        };\n        this.toggleOpen = (collapsable) => {\n            if (collapsable == \"files\") {\n                this.setState({ filesOpen: !this.state.filesOpen });\n            }\n            else if (collapsable == \"submissions\") {\n                this.setState({ submissionsOpen: !this.state.submissionsOpen });\n            }\n        };\n        this.assignment = props.assignment;\n        this.index = props.index;\n        this.lecture = props.lecture;\n        this.toggleOpen = this.toggleOpen.bind(this);\n        this.openFile = this.openFile.bind(this);\n        this.fetchAssignment = this.fetchAssignment.bind(this);\n        this.submitAssignment = this.submitAssignment.bind(this);\n        this.getSubmissions = this.getSubmissions.bind(this);\n    }\n    componentDidMount() {\n        this.getSubmissions();\n    }\n    async openFile(path) {\n        if (this.assignment.status == 'released') { // if not fetched\n            let result = await showDialog({\n                title: \"Assignment not fetched yet!\",\n                body: \"Before working on assignments you need to fetch them! Do you want to fetch the assignment now?\",\n                buttons: [Dialog.cancelButton(), Dialog.okButton({ label: \"Fetch Now\" })]\n            });\n            if (!result.button.accept) {\n                return;\n            }\n            else {\n                await this.fetchAssignment();\n            }\n        }\n        console.log(\"Opening file: \" + path);\n        GlobalObjects.commands.execute('docmanager:open', {\n            path: path,\n            options: {\n                mode: 'tab-after' // tab-after tab-before split-bottom split-right split-left split-top\n            }\n        }).catch(error => {\n            showErrorMessage(\"Error Opening File\", error);\n        });\n    }\n    async fetchAssignment() {\n        try {\n            let result = await showDialog({\n                title: \"Fetch Assignment\",\n                body: `Do you want to fetch ${this.assignment.name}?`,\n                buttons: [Dialog.cancelButton(), Dialog.okButton({ label: \"Fetch\" })]\n            });\n            if (result.button.accept) {\n                // update assignment\n                this.assignment = await fetchAssignment(this.lecture.id, this.assignment.id).toPromise();\n            }\n        }\n        catch (e) {\n            showErrorMessage(\"Error Fetching Assignment\", e);\n        }\n    }\n    async submitAssignment() {\n        try {\n            let result = await showDialog({\n                title: \"Submit Assignment\",\n                body: `Do you want to submit ${this.assignment.name}? You can always re-submit the assignment before the due date.`,\n                buttons: [Dialog.cancelButton(), Dialog.okButton({ label: \"Submit\" })],\n            });\n            if (result.button.accept) {\n                await submitAssignment(this.lecture, this.assignment).toPromise();\n                await this.getSubmissions();\n            }\n        }\n        catch (e) {\n            showErrorMessage(\"Error Submitting Assignment\", e);\n        }\n    }\n    getSubmissions() {\n        getSubmissions(this.lecture, this.assignment).subscribe(userSubmissions => this.setState({ submissions: userSubmissions.submissions }), error => showErrorMessage(\"Error Loading Submissions\", error));\n    }\n    render() {\n        // TODO: show due date of assignment\n        return React.createElement(\"li\", { key: this.index },\n            React.createElement(\"div\", { className: \"assignment\" },\n                React.createElement(\"div\", { className: \"assignment-header\" },\n                    React.createElement(Icon, { icon: IconNames.INBOX, iconSize: this.iconSize, className: \"flavor-icon\" }),\n                    this.assignment.name,\n                    React.createElement(\"span\", { className: \"button-list\" },\n                        React.createElement(Button, { className: \"assignment-button\", onClick: this.fetchAssignment, icon: IconNames.CLOUD_DOWNLOAD, disabled: this.assignment.status != \"released\", outlined: true, intent: Intent.PRIMARY }, \"Fetch\"),\n                        React.createElement(Button, { className: \"assignment-button\", onClick: this.submitAssignment, icon: IconNames.SEND_MESSAGE, disabled: this.assignment.status != \"fetched\", outlined: true, intent: Intent.SUCCESS }, \"Submit\"))),\n                React.createElement(\"div\", { onClick: () => this.toggleOpen(\"files\"), className: \"assignment-title\" },\n                    React.createElement(Icon, { icon: IconNames.CHEVRON_RIGHT, iconSize: this.iconSize, className: `collapse-icon-small ${this.state.filesOpen ? \"collapse-icon-small-open\" : \"\"}` }),\n                    React.createElement(Icon, { icon: IconNames.FOLDER_CLOSE, iconSize: this.iconSize, className: \"flavor-icon\" }),\n                    \"Exercises and Files\"),\n                React.createElement(Collapse, { isOpen: this.state.filesOpen },\n                    React.createElement(\"div\", { className: \"assignment-content\" },\n                        this.assignment.exercises.map((ex, i) => React.createElement(\"div\", { className: \"list-element\", onClick: () => this.openFile(`${this.lecture.name}/${this.assignment.name}/${ex.name}`) },\n                            React.createElement(Icon, { icon: IconNames.EDIT, iconSize: this.iconSize, className: \"flavor-icon\" }),\n                            ex.name)),\n                        this.assignment.files.map((file, i) => React.createElement(\"div\", { className: \"list-element\", onClick: () => this.openFile(`${this.lecture.name}/${this.assignment.name}/${file.name}`) },\n                            React.createElement(Icon, { icon: IconNames.DOCUMENT, iconSize: this.iconSize, className: \"flavor-icon\" }),\n                            file.name)))),\n                React.createElement(\"div\", { onClick: () => this.toggleOpen(\"submissions\"), className: \"assignment-title\" },\n                    React.createElement(Icon, { icon: IconNames.CHEVRON_RIGHT, iconSize: this.iconSize, className: `collapse-icon-small ${this.state.submissionsOpen ? \"collapse-icon-small-open\" : \"\"}` }),\n                    React.createElement(Icon, { icon: IconNames.TICK_CIRCLE, iconSize: this.iconSize, className: \"flavor-icon\" }),\n                    \"Submissions\"),\n                React.createElement(Collapse, { isOpen: this.state.submissionsOpen },\n                    React.createElement(\"div\", { className: \"assignment-content\" }, this.state.submissions.map((submission, i) => React.createElement(\"div\", { className: \"submission-element\" },\n                        React.createElement(Icon, { icon: IconNames.FORM, iconSize: this.iconSize, className: \"flavor-icon\" }),\n                        submission.submitted_at,\n                        submission.status != \"not_graded\" ?\n                            React.createElement(Button, { className: \"assignment-button\", icon: IconNames.CLOUD_DOWNLOAD, active: true, outlined: true, intent: Intent.PRIMARY, small: true }, \"Fetch Feedback\")\n                            : null))))));\n    }\n}\n","import * as React from 'react';\nimport { AssignmentsComponent } from './assignment-list.component';\nimport { getAllLectures } from '../../services/lectures.service';\nimport { showErrorMessage } from '@jupyterlab/apputils';\nexport class CoursesComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lectures: new Array()\n        };\n        // this.state = {\"lectures\": props.lectures};\n    }\n    componentDidMount() {\n        getAllLectures().subscribe(lectures => this.setState(this.state.lectures = lectures), error => showErrorMessage(\"Error Fetching Lectures\", error));\n    }\n    render() {\n        return React.createElement(\"div\", { className: \"course-list\" }, this.state.lectures.map((el, index) => React.createElement(AssignmentsComponent, { lecture: el, open: index == 0 })));\n    }\n}\n","import * as React from 'react';\nimport { getAllLectures } from '../../services/lectures.service';\nimport { CourseManageAssignmentsComponent } from './coursemanageassignment-list.component';\nexport class CourseManageComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lectures: new Array()\n        };\n        // this.state = {\"lectures\": props.lectures};\n    }\n    componentDidMount() {\n        getAllLectures().subscribe(lectures => {\n            console.log(lectures);\n            this.setState(this.state.lectures = lectures);\n        });\n    }\n    render() {\n        return React.createElement(\"div\", { className: \"course-list\" }, this.state.lectures.map((el, index) => React.createElement(CourseManageAssignmentsComponent, { lecture: el, title: el.name, open: index == 0 })));\n    }\n}\n","import * as React from 'react';\nimport { createAssignment, getAllAssignments } from '../../services/assignments.service';\nimport { Collapse } from '@jupyterlab/ui-components';\nimport { CourseManageAssignmentComponent } from './coursemanageassignment.component';\nimport { Button, Icon } from '@blueprintjs/core';\nimport { showErrorMessage } from '@jupyterlab/apputils/lib/dialog';\nimport { InputDialog } from '@jupyterlab/apputils/lib/inputdialog';\nexport class CourseManageAssignmentsComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false,\n            assignments: new Array()\n        };\n        this.toggleOpen = () => {\n            this.setState({ isOpen: !this.state.isOpen });\n        };\n        this.title = props.title;\n        this.lecture = props.lecture;\n        this.state.isOpen = props.open || false;\n        this.getAssignments = this.getAssignments.bind(this);\n    }\n    async createAssignment() {\n        try {\n            let name;\n            InputDialog.getText({ title: 'Input assignment name' }).then(input => {\n                name = input;\n            });\n            createAssignment(this.lecture.id, name);\n        }\n        catch (e) {\n            showErrorMessage(\"Error Creating Assignment\", e);\n        }\n    }\n    componentDidMount() {\n        this.getAssignments();\n    }\n    getAssignments() {\n        getAllAssignments(this.lecture.id).subscribe(assignments => {\n            console.log(assignments);\n            this.setState(this.state.assignments = assignments);\n        });\n    }\n    render() {\n        return React.createElement(\"div\", { className: \"CourseManageAssignmentsComponent\" },\n            React.createElement(\"div\", { onClick: this.toggleOpen, className: \"collapse-header\" },\n                React.createElement(Icon, { icon: \"learning\", className: \"flavor-icon\" }),\n                React.createElement(Icon, { icon: \"chevron-down\", className: `collapse-icon ${this.state.isOpen ? \"collapse-icon-open\" : \"\"}` }),\n                this.title),\n            React.createElement(Collapse, { isOpen: this.state.isOpen, className: \"collapse-body\", keepChildrenMounted: true },\n                React.createElement(\"ul\", null, this.state.assignments.map((el, index) => React.createElement(CourseManageAssignmentComponent, { index: index, lectureName: this.title, lecture: this.lecture, assignment: el }))),\n                React.createElement(\"div\", { className: \"assignment-create\" },\n                    React.createElement(Button, { icon: \"add\", outlined: true, onClick: this.createAssignment, className: \"assignment-button\" }, \"Create new Assignment\"))));\n    }\n}\n","import { Button, Collapse, Icon, Tag } from '@blueprintjs/core';\nimport { Dialog, InputDialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport * as React from 'react';\nimport { GlobalObjects } from '../../index';\nimport { getSubmissions } from '../../services/submissions.service';\nexport class CourseManageAssignmentComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.iconSize = 14;\n        this.state = {\n            isOpen: false,\n            submissions: new Array(),\n        };\n        this.toggleOpen = () => {\n            console.log(\"toggle assignment header\");\n            this.setState({ isOpen: !this.state.isOpen });\n        };\n        this.assignment = props.assignment;\n        this.index = props.index;\n        this.lectureName = props.lectureName;\n        this.lecture = props.lecture;\n    }\n    componentDidMount() {\n        // TODO: should only get all submissions if assignment is released\n        getSubmissions(this.lecture, { id: this.index }).subscribe(userSubmissions => {\n            console.log(userSubmissions);\n            this.setState(this.state.submissions = userSubmissions.submissions);\n        });\n    }\n    openFile(path) {\n        console.log(\"Opening file: \" + path);\n        GlobalObjects.commands.execute('docmanager:open', {\n            path: path,\n            options: {\n                mode: 'tab-after' // tab-after tab-before split-bottom split-right split-left split-top\n            }\n        }).catch(error => {\n            showErrorMessage(\"Error Opening File\", error);\n        });\n    }\n    openGrading(lectureID, assignmentID) {\n        GlobalObjects.commands.execute('grading:open', {\n            lectureID,\n            assignmentID\n        }).catch(error => {\n            showErrorMessage(\"Error Opening Submission View\", error);\n        });\n    }\n    async openPreview() {\n        //TODO: This should open the file in the preview directory not the /lecture/assignment directory\n        let names = this.assignment.exercises.map(ex => ex.name);\n        let path = `${this.lecture.name}/${this.assignment.name}/`;\n        if (names.length > 1) {\n            let value = await InputDialog.getItem({\n                title: 'Choose an exercise to preview',\n                items: names\n            });\n            if (value.value == null)\n                return;\n            path += value.value;\n        }\n        else {\n            path += this.assignment.exercises[0].name;\n        }\n        GlobalObjects.commands.execute('docmanager:open', {\n            path: path,\n            options: {\n                mode: 'split-right' // tab-after tab-before split-bottom split-right split-left split-top\n            }\n        }).catch(error => {\n            showErrorMessage(\"Error Opening File\", error);\n        });\n    }\n    async pushAssignment() {\n        let result = await showDialog({\n            title: \"Push Assignment\",\n            body: `Do you want to push ${this.assignment.name}? This updates the state of the assignment on the server with your local state.`,\n            buttons: [Dialog.cancelButton(), Dialog.okButton({ label: \"Push\" })],\n        });\n        if (!result.button.accept)\n            return;\n        // TODO: push assignment\n    }\n    async pullAssignment() {\n        let result = await showDialog({\n            title: \"Pull Assignment\",\n            body: `Do you want to pull ${this.assignment.name}? This updates your assignment with the state of the server.`,\n            buttons: [Dialog.cancelButton(), Dialog.okButton({ label: \"Pull\" })],\n        });\n        if (!result.button.accept)\n            return;\n        // TODO: pull assignment\n    }\n    async releaseAssignment() {\n        let result = await showDialog({\n            title: \"Release Assignment\",\n            body: `Do you want to release ${this.assignment.name} for all students? This can NOT be undone!`,\n            buttons: [Dialog.cancelButton(), Dialog.warnButton({ label: \"Release\" })],\n        });\n        if (!result.button.accept)\n            return;\n        result = await showDialog({\n            title: \"Confirmation\",\n            body: `Are you sure you want to release ${this.assignment.name}?`,\n            buttons: [Dialog.cancelButton(), Dialog.warnButton({ label: \"Release\" })],\n        });\n        if (!result.button.accept)\n            return;\n        // TODO: release assignment\n    }\n    render() {\n        return React.createElement(\"li\", { key: this.index },\n            React.createElement(\"div\", { className: \"assignment\" },\n                React.createElement(\"div\", { className: \"assignment-header\" },\n                    React.createElement(\"span\", { onClick: this.toggleOpen },\n                        React.createElement(Icon, { icon: \"chevron-right\", iconSize: this.iconSize, className: `collapse-icon-small ${this.state.isOpen ? \"collapse-icon-small-open\" : \"\"}` }),\n                        React.createElement(Icon, { icon: \"inbox\", iconSize: this.iconSize, className: \"flavor-icon\" }),\n                        this.assignment.name),\n                    React.createElement(\"span\", { className: \"button-list\" },\n                        React.createElement(Button, { icon: 'edit', outlined: true, className: \"assignment-button\" }, \"Edit\"),\n                        React.createElement(Button, { icon: 'search', outlined: true, className: \"assignment-button\", onClick: () => this.openPreview() }, \"Preview\"),\n                        React.createElement(Button, { icon: 'git-push', intent: \"success\", outlined: true, className: \"assignment-button\", onClick: () => this.pushAssignment() }, \"Push\"),\n                        React.createElement(Button, { icon: 'git-pull', intent: \"primary\", outlined: true, className: \"assignment-button\", onClick: () => this.pullAssignment() }, \" Pull\"),\n                        React.createElement(Button, { icon: 'cloud-upload', outlined: true, className: \"assignment-button\", disabled: this.assignment.status == \"created\", onClick: () => this.releaseAssignment() }, \"Release\"),\n                        React.createElement(Tag, { className: \"assignment-tag\", icon: \"arrow-top-right\", interactive: true, onClick: () => this.openGrading(this.lecture.id, this.assignment.id) },\n                            this.state.submissions.length,\n                            \" \",\n                            \"Submission\" + ((this.state.submissions.length > 1) ? \"s\" : \"\")))),\n                React.createElement(Collapse, { isOpen: this.state.isOpen },\n                    React.createElement(\"div\", { className: \"assignment-content\" },\n                        this.assignment.exercises.map((ex, i) => React.createElement(\"div\", { className: \"list-element\", onClick: () => this.openFile(`${this.lectureName}/${this.assignment.name}/${ex.name}`) },\n                            React.createElement(Icon, { icon: \"edit\", iconSize: this.iconSize, className: \"flavor-icon\" }),\n                            ex.name)),\n                        this.assignment.files.map((file, i) => React.createElement(\"div\", { className: \"list-element\", onClick: () => this.openFile(`${this.lectureName}/${this.assignment.name}/${file.name}`) },\n                            React.createElement(Icon, { icon: \"document\", iconSize: this.iconSize, className: \"flavor-icon\" }),\n                            file.name)),\n                        React.createElement(\"span\", { className: \"add-buttons\" },\n                            React.createElement(Button, { icon: \"add\", outlined: true, className: \"assignment-button\" }, \"Add File\"),\n                            React.createElement(Button, { icon: \"upload\", outlined: true, className: \"assignment-button\" }, \"Upload File\"))))));\n    }\n}\n","import * as React from 'react';\nimport { fetchAssignment } from '../../services/assignments.service';\nimport { getLecture } from '../../services/lectures.service';\nimport { getAllSubmissions } from '../../services/submissions.service';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { Button } from '@blueprintjs/core/lib/cjs/components/button/buttons';\nexport class GradingComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            assignment: {},\n            lecture: {},\n            submissions: new Array(),\n            isOpen: true,\n            rows: new Array(),\n        };\n        this.lectureID = props.lectureID;\n        this.assignmentID = props.assignmentID;\n        this.title = props.title;\n        this.columns = [\n            { field: 'id', headerName: 'Id', width: 100 },\n            { field: 'user', headerName: 'User', width: 130 },\n            { field: 'date', headerName: 'Date', width: 200 },\n            {\n                field: '',\n                headerName: '',\n                width: 150,\n                disableClickEventBubbling: true,\n                disableColumnMenu: true,\n                renderCell: (params) => (React.createElement(Button, { icon: \"highlight\", outlined: true }, \"Autograde\")),\n            },\n            { field: 'score', headerName: 'Score', width: 130 },\n        ];\n    }\n    async componentDidMount() {\n        let assignment = await fetchAssignment(this.lectureID, this.assignmentID, false, true).toPromise();\n        let lecture = await getLecture(this.lectureID).toPromise();\n        this.title.label = \"Grading: \" + assignment.name;\n        this.setState({ assignment, lecture });\n        getAllSubmissions(lecture, assignment, false).subscribe(userSubmissions => {\n            console.log(userSubmissions);\n            this.setState(this.state.submissions = userSubmissions);\n            //Temp rows for testing\n            this.setState(this.state.rows = this.generateRows());\n            console.log(\"rows:\");\n            console.log(this.state.rows);\n        });\n    }\n    generateRows() {\n        // let rows = [{ id: 10, user: \"hasdf\", date: \"asdfadfa\" }]\n        let rows = new Array();\n        //TODO: right now reading only the first \n        this.state.submissions.forEach(sub => { rows.push({ id: sub.user.id, user: sub.user.name, date: sub.submissions[0].submitted_at }); });\n        return rows;\n    }\n    render() {\n        return (React.createElement(\"div\", { style: { height: \"100%\", display: \"flex\", flexDirection: \"column\" } },\n            React.createElement(DataGrid, { rows: this.state.rows, columns: this.columns, checkboxSelection: true, hideFooterPagination: true }),\n            React.createElement(Button, { icon: \"highlight\", color: \"primary\", outlined: true, style: { alignSelf: \"flex-end\", marginRight: \"20px\", marginBottom: \"20px\" } }, \"Autograde selected\")));\n    }\n}\n","import { ICommandPalette, MainAreaWidget } from '@jupyterlab/apputils';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { INotebookTools } from '@jupyterlab/notebook';\nimport { CourseManageView } from './widgets/coursemanage';\nimport { checkIcon, editIcon } from '@jupyterlab/ui-components';\nimport { AssignmentList } from './widgets/assignment-list';\nimport { GradingView } from './widgets/grading';\n// import { requestAPI } from './handler';\nvar AssignmentsCommandIDs;\n(function (AssignmentsCommandIDs) {\n    AssignmentsCommandIDs.create = 'assignments:create';\n    AssignmentsCommandIDs.open = 'assignments:open';\n})(AssignmentsCommandIDs || (AssignmentsCommandIDs = {}));\nvar CourseManageCommandIDs;\n(function (CourseManageCommandIDs) {\n    CourseManageCommandIDs.create = 'coursemanage:create';\n    CourseManageCommandIDs.open = 'coursemanage:open';\n})(CourseManageCommandIDs || (CourseManageCommandIDs = {}));\nvar GradingCommandIDs;\n(function (GradingCommandIDs) {\n    GradingCommandIDs.create = 'grading:create';\n    GradingCommandIDs.open = 'grading:open';\n})(GradingCommandIDs || (GradingCommandIDs = {}));\nexport class GlobalObjects {\n}\n/**\n * Initialization data for the grading extension.\n */\nconst extension = {\n    id: 'coursemanage:plugin',\n    autoStart: true,\n    requires: [ICommandPalette, ILauncher, INotebookTools],\n    activate: (app, palette, launcher, nbtools) => {\n        console.log('JupyterLab extension grading is activated!');\n        console.log('JupyterFrontEnd:', app);\n        console.log('ICommandPalette:', palette);\n        GlobalObjects.commands = app.commands;\n        /* ##### Course Manage View Widget ##### */\n        let command = CourseManageCommandIDs.create;\n        app.commands.addCommand(command, {\n            execute: () => {\n                // Create a blank content widget inside of a MainAreaWidget\n                const gradingView = new CourseManageView();\n                const gradingWidget = new MainAreaWidget({ content: gradingView });\n                gradingWidget.id = 'coursemanage-jupyterlab';\n                gradingWidget.title.label = 'Course Management';\n                gradingWidget.title.closable = true;\n                return gradingWidget;\n            }\n        });\n        command = CourseManageCommandIDs.open;\n        app.commands.addCommand(command, {\n            label: 'Course Management',\n            execute: async () => {\n                const gradingWidget = await app.commands.execute(CourseManageCommandIDs.create);\n                if (!gradingWidget.isAttached) {\n                    // Attach the widget to the main work area if it's not there\n                    app.shell.add(gradingWidget, 'main');\n                }\n                // Activate the widget\n                app.shell.activateById(gradingWidget.id);\n            },\n            icon: checkIcon\n        });\n        // Add the command to the launcher\n        console.log(\"Add course management launcher\");\n        launcher.add({\n            command: command,\n            category: 'Assignments',\n            rank: 0\n        });\n        // Add the command to the palette.\n        // palette.addItem({ command, category: 'Tutorial' });\n        // Add the command to the Sidebar.\n        // TODO: add grading to sidebar like file viewer and plugins etc\n        /* ##### Assignment List Widget ##### */\n        command = AssignmentsCommandIDs.create;\n        app.commands.addCommand(command, {\n            execute: () => {\n                // Create a blank content widget inside of a MainAreaWidget\n                const assignmentList = new AssignmentList();\n                const assignmentWidget = new MainAreaWidget({ content: assignmentList });\n                assignmentWidget.id = 'assignments-jupyterlab';\n                assignmentWidget.title.label = 'Assignments';\n                assignmentWidget.title.closable = true;\n                return assignmentWidget;\n            }\n        });\n        command = AssignmentsCommandIDs.open;\n        app.commands.addCommand(command, {\n            label: 'Assignments',\n            execute: async () => {\n                const assignmentWidget = await app.commands.execute(AssignmentsCommandIDs.create);\n                if (!assignmentWidget.isAttached) {\n                    // Attach the widget to the main work area if it's not there\n                    app.shell.add(assignmentWidget, 'main');\n                }\n                // Activate the widget\n                app.shell.activateById(assignmentWidget.id);\n            },\n            icon: editIcon\n        });\n        // Add the command to the launcher\n        console.log(\"Add assignment launcher\");\n        launcher.add({\n            command: command,\n            category: 'Assignments',\n            rank: 0\n        });\n        command = GradingCommandIDs.create;\n        app.commands.addCommand(command, {\n            execute: (args) => {\n                const lectureID = typeof args['lectureID'] === 'undefined' ? null : args['lectureID'];\n                const assignmentID = typeof args['assignmentID'] === 'undefined' ? null : args['assignmentID'];\n                const gradingView = new GradingView({ lectureID, assignmentID });\n                const gradingWidget = new MainAreaWidget({ content: gradingView });\n                gradingWidget.id = 'grading-jupyterlab';\n                gradingWidget.title.label = 'Grading';\n                gradingWidget.title.closable = true;\n                return gradingWidget;\n            }\n        });\n        command = GradingCommandIDs.open;\n        app.commands.addCommand(command, {\n            label: 'Grading',\n            execute: async (args) => {\n                const gradingView = await app.commands.execute(GradingCommandIDs.create, args);\n                if (!gradingView.isAttached) {\n                    // Attach the widget to the main work area if it's not there\n                    app.shell.add(gradingView, 'main');\n                }\n                // Activate the widget\n                app.shell.activateById(gradingView.id);\n            },\n            icon: editIcon\n        });\n    }\n};\nexport default extension;\n","import { request, HTTPMethod } from './request.service';\nexport function createAssignment(lectureId, assignment) {\n    return request(HTTPMethod.POST, `/lectures/${lectureId}/assignments`, {}, assignment);\n}\nexport function getAllAssignments(lectureId) {\n    return request(HTTPMethod.GET, `/lectures/${lectureId}/assignments`, {});\n}\nexport function updateAssignment(lectureId, assignment) {\n    return request(HTTPMethod.PUT, `/lectures/${lectureId}/assignments/${assignment.id}`, {}, assignment);\n}\nexport function fetchAssignment(lectureId, assignmentId, instructor = false, metadataOnly = false) {\n    let url = `/lectures/${lectureId}/assignments/${assignmentId}`;\n    if (instructor || metadataOnly) {\n        let searchParams = new URLSearchParams({\n            \"instructor-version\": String(instructor),\n            \"metadata-only\": String(metadataOnly)\n        });\n        url += '?' + searchParams;\n    }\n    return request(HTTPMethod.GET, url, {});\n}\nexport function deleteAssignment(lectureId, assignmentId) {\n    request(HTTPMethod.DELETE, `/lectures/${lectureId}/assignments/${assignmentId}`, {});\n}\n","import { request, HTTPMethod } from './request.service';\nexport function createLecture(lecture) {\n    return request(HTTPMethod.POST, \"/lectures\", {}, lecture);\n}\nexport function getAllLectures() {\n    return request(HTTPMethod.GET, \"/lectures\", {});\n}\nexport function updateLecture(lecture) {\n    return request(HTTPMethod.PUT, `/lectures/${lecture.id}`, {}, lecture);\n}\nexport function getLecture(lectureId) {\n    return request(HTTPMethod.GET, `/lectures/${lectureId}`, {});\n}\nexport function deleteLecture(lectureId) {\n    request(HTTPMethod.DELETE, `/lectures/${lectureId}`, {});\n}\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { from } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nexport var HTTPMethod;\n(function (HTTPMethod) {\n    HTTPMethod[\"GET\"] = \"GET\";\n    HTTPMethod[\"POST\"] = \"POST\";\n    HTTPMethod[\"PUT\"] = \"PUT\";\n    HTTPMethod[\"DELETE\"] = \"DELETE\";\n})(HTTPMethod || (HTTPMethod = {}));\nexport function request(method, endPoint, options, body = null, url = \"http://128.130.202.214:8000/services/mock\") {\n    options.method = method;\n    if (body) {\n        options.body = JSON.stringify(body);\n    }\n    const settings = ServerConnection.makeSettings();\n    let requestUrl = \"\";\n    if (url == null) {\n        // ServerConnection only allows requests to notebook baseUrl\n        requestUrl = URLExt.join(settings.baseUrl, \"/grader.grading_labextension\", // API Namespace\n        endPoint);\n        console.log(\"Request \" + method.toString() + \" URL: \" + requestUrl);\n        return from(ServerConnection.makeRequest(requestUrl, options, settings)).pipe(switchMap(async (response) => {\n            let data = await response.text();\n            if (data.length > 0) {\n                try {\n                    data = JSON.parse(data);\n                }\n                catch (error) {\n                    console.log('Not a JSON response body.', response);\n                }\n            }\n            return data;\n        }));\n    }\n    else {\n        requestUrl = url + endPoint;\n        options.headers = {\n            \"Authorization\": \"Bearer 123\"\n        };\n        console.log(\"Request \" + method.toString() + \" URL: \" + requestUrl);\n        return from(fetch(requestUrl, options)).pipe(switchMap(async (response) => {\n            let data = await response.json();\n            return data;\n        }));\n    }\n}\n","import { map } from \"rxjs/operators\";\nimport { request, HTTPMethod } from \"./request.service\";\nexport function submitAssignment(lecture, assignment) {\n    return request(HTTPMethod.POST, `/lectures/${lecture.id}/assignments/${assignment.id}/submissions`, {}, {});\n}\nexport function getSubmissions(lecture, assignment, latest = false) {\n    let url = `/lectures/${lecture.id}/assignments/${assignment.id}/submissions`;\n    if (latest) {\n        let searchParams = new URLSearchParams({\n            \"latest\": String(latest)\n        });\n        url += '?' + searchParams;\n    }\n    return request(HTTPMethod.GET, url, {}).pipe(map(array => array[0]));\n}\nexport function getAllSubmissions(lecture, assignment, latest = false, instructor = true) {\n    let url = `/lectures/${lecture.id}/assignments/${assignment.id}/submissions`;\n    if (latest || instructor) {\n        let searchParams = new URLSearchParams({\n            \"instructor-version\": String(instructor),\n            \"latest\": String(latest)\n        });\n        url += '?' + searchParams;\n    }\n    return request(HTTPMethod.GET, url, {});\n}\nexport function getFeedback(lecture, assignment, latest = false, instructor = false) {\n    let url = `/lectures/${lecture.id}/assignments/${assignment.id}/feedback`;\n    if (latest || instructor) {\n        let searchParams = new URLSearchParams({\n            \"instructor-version\": String(instructor),\n            \"latest\": String(latest)\n        });\n        url += '?' + searchParams;\n    }\n    return request(HTTPMethod.GET, url, {});\n}\n","import { ReactWidget } from '@jupyterlab/apputils';\nimport * as React from 'react';\nimport { CoursesComponent } from '../components/assignments/courses.component';\nexport class AssignmentList extends ReactWidget {\n    /*\n     * Construct a new grading widget\n     */\n    constructor(options = {}) {\n        super();\n        this.id = options.id;\n        this.addClass('AssignmentListWidget');\n    }\n    render() {\n        return React.createElement(CoursesComponent, null);\n    }\n}\n","import * as React from 'react';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { CourseManageComponent } from '../components/coursemanage/coursemanage.component';\nexport class CourseManageView extends ReactWidget {\n    /**\n     * Construct a new grading widget\n     */\n    constructor(options = {}) {\n        super();\n        this.id = options.id;\n        this.addClass('GradingWidget');\n    }\n    render() {\n        return React.createElement(CourseManageComponent, null);\n    }\n}\n","import * as React from 'react';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { GradingComponent } from '../components/grading/grading';\nexport class GradingView extends ReactWidget {\n    /**\n     * Construct a new grading widget\n     */\n    constructor(options) {\n        super();\n        this.lectureID = options.lectureID;\n        this.assignmentID = options.assignmentID;\n        this.addClass('GradingWidget');\n    }\n    render() {\n        return React.createElement(GradingComponent, { lectureID: this.lectureID, assignmentID: this.assignmentID, title: this.title });\n    }\n}\n"],"sourceRoot":""}