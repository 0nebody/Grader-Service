## Model generation:
# openapi-generator-cli generate -i ./grader-extensions/documentation/openapi.yml -g typescript-angular -o ./grader-extensions/grading_labextension/src --global-property models

openapi: '3.0.2'
info:
  title: Grader Server Extension API
  version: '0.1'
servers:
    - url: /services/mock
      description: relative path to mock

###### Tags of API endpoints
tags:
- name: "Lectures"
  description: "Available lectures"
- name: "Assignments"
  description: Assignments of a lecture
- name: "Submissions"
  description: View submissions of an assignment
- name: "Grading"
  description: Manage the grading and feedback of assignments (Instructor)

# TODO: handle "sub-assignments"
paths:
  /lectures:
    post:
      security:
        - hub_auth:
          - instructor
      summary: Create new lecture
      tags:
      - "Lectures"
      requestBody:
        description: The parameters of the lecture that is created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lecture'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lecture"
        403:
          description: Unautorized
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"  
    get:
      security:
        - hub_auth:
          - instructor
          - tutor
          - student
      summary: "Return all lectures that are available to the user"
      tags:
      - "Lectures"
      parameters:
        - name: semester
          in: query
          description: The semester for which to fetch lectures
          required: false
          example: "SS21"
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Lecture"
              example:
                [
                  $ref: "#/components/schemas/Lecture/example",
                  $ref: "#/components/schemas/Lecture/example",
                  $ref: "#/components/schemas/Lecture/example",
                  $ref: "#/components/schemas/Lecture/example",
                ]
        403:
          description: Unautorized
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  
  /lectures/{lect_id}:
    put:
      security:
        - hub_auth:
          - instructor
          - tutor
      summary: Update an existing lecture
      tags:
      - "Lectures"
      parameters:
      - name: lect_id
        in: path
        description: ID of the lecture
        required: true
        example: 1
        schema:
          type: integer
          format: int64
      requestBody:
        description: The parameters of the lecture that should be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lecture'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lecture"
        403:
          description: Unautorized
        404:
          description: Lecture id not found
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage" 
    get:
      security:
        - hub_auth:
          - instructor
          - tutor
          - student
      summary: Return the lecture with specified id
      tags:
      - "Lectures"
      parameters:
      - name: lect_id
        in: path
        description: ID of the lecture
        required: true
        example: 1
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lecture"
        403:
          description: Unautorized
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    delete:
      security:
        - hub_auth:
          - instructor
          - tutor
      summary: Delete an existing lecture
      tags:
      - "Lectures"
      parameters:
      - name: lect_id
        in: path
        description: ID of the lecture
        required: true
        example: 1
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lecture"
        403:
          description: Unautorized
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage" 

  /lectures/{lect_id}/assignments:
    post:
      security:
        - hub_auth:
          - instructor
          - tutor
      summary: Request creation of an assignment
      tags:
      - Assignments
      parameters:
      - name: lect_id
        in: path
        description: ID of the lecture
        required: true
        example: 1
        schema:
          type: integer
          format: int64
      requestBody:
        description: The initial state of an assignment. Every field will be empty except `due_date` and `name`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assignment"
        403:
          description: Unautorized
        404:
          description: Lecture id or assignment id not found.
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    get:
      security:
        - hub_auth:
          - instructor
          - tutor
          - student
      summary: "Return the assignments of a specific lecture"
      tags:
        - "Assignments"
      parameters:
      - name: lect_id
        in: path
        description: ID of the lecture
        required: true
        example: 1
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Assignment"
              example:
                [
                  $ref: "#/components/schemas/Assignment/example",
                  $ref: "#/components/schemas/Assignment/example",
                  $ref: "#/components/schemas/Assignment/example",
                ]
        403:
          description: Unautorized
        404:
          description: Lecture id not found.
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /lectures/{lect_id}/assignments/{a_id}:
    put:
      security:
        - hub_auth:
          - instructor
          - tutor
      summary: Update an existing assignment (also handles release)
      tags:
      - Assignments
      parameters:
      - name: lect_id
        in: path
        description: ID of the lecture
        required: true
        example: 1
        schema:
          type: integer
          format: int64
      - name: a_id
        in: path
        description: ID of the assignment in the lecture
        required: true
        example: 2
        schema:
          type: integer
          format: int64
      requestBody:
        description: The parameters of the assignment that should be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assignment"
        403:
          description: Unautorized
        404:
          description: Lecture id or assignment id not found.
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    get:
      security:
        - hub_auth:
          - instructor
          - tutor
          - student
      summary: "Request the assignment to be fetched"
      tags: 
      - "Assignments"
      parameters:
      - name: lect_id
        in: path
        description: ID of the lecture
        required: true
        example: 1
        schema:
          type: integer
          format: int64
      - name: a_id
        in: path
        description: ID of the assignment in the lecture
        required: true
        example: 2
        schema:
          type: integer
          format: int64
      - name: instuctor-version # TODO: Take care of auth!!! Maybe different path?
        in: query
        description: Fetch the instructor version of the assignment
        required: false
        example: false
        schema:
          type: boolean
          default: false
      - name: metadata-only
        in: query
        description: Only return the assignment information and don't fetch it
        required: false
        example: false
        schema:
          type: boolean
          default: false
      - name: include-submissions
        in: query
        description: Include past submissions of the assignment
        required: false
        example: false
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assignment"
        403:
          description: Unautorized
        404:
          description: Lecture id or assignment id not found
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    delete:
      security:
        - hub_auth:
          - instructor
          - tutor
      summary: Delete an existing assignment
      tags:
      - Assignments
      parameters:
      - name: lect_id
        in: path
        description: ID of the lecture
        required: true
        example: 1
        schema:
          type: integer
          format: int64
      - name: a_id
        in: path
        description: ID of the assignment in the lecture
        required: true
        example: 2
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
        403:
          description: Unautorized
        404:
          description: Lecture id or assignment id not found.
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    
  /lectures/{lect_id}/assignments/{a_id}/submissions:
    post:
      security:
        - hub_auth:
          - instructor
          - tutor
          - student
      summary: "Request assignment to be submitted"
      tags:
        - "Submissions"
      parameters:
      - name: lect_id
        in: path
        description: ID of the lecture
        required: true
        example: 1
        schema:
          type: integer
          format: int64
      - name: a_id
        in: path
        description: ID of the assignment in the lecture
        required: true
        example: 2
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
        403:
          description: Unautorized
        404:
          description: Lecture id or assignment id not found.
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    get:
      security:
        - hub_auth:
          - instructor
          - tutor
          - student
      summary: Return the submissions of an assignment
      tags:
        - "Submissions"
      parameters:
      - name: lect_id
        in: path
        description: ID of the lecture
        required: true
        example: 1
        schema:
          type: integer
          format: int64
      - name: a_id
        in: path
        description: ID of the assignment in the lecture
        required: true
        example: 2
        schema:
          type: integer
          format: int64
      - name: latest
        in: query
        description: Only return the latest submission
        required: false
        schema:
          type: boolean
          default: false
      - name: instructor-version
        in: query
        description: Whether to fetch the all submissions of students
        required: false
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSubmissions"
        403:
          description: Unautorized
        404:
          description: Lecture id or assignment id not found
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /lectures/{lect_id}/assignments/{a_id}/feedback:
    get:
      security:
        - hub_auth:
          - instructor
          - tutor
          - student
      summary: Return the feedback of an assignment
      tags:
        - "Submissions"
      parameters:
      - name: lect_id
        in: path
        description: ID of the lecture
        required: true
        example: 1
        schema:
          type: integer
          format: int64
      - name: a_id
        in: path
        description: ID of the assignment in the lecture
        required: true
        example: 2
        schema:
          type: integer
          format: int64
      - name: latest
        in: query
        description: Only return the feedback of the latest submission
        required: false
        schema:
          type: boolean
          default: false
      - name: instructor-version
        in: query
        description: Whether to fetch the all feedback of students
        required: false
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFeedback"
        403:
          description: Unautorized
        404:
          description: Lecture id or assignment id not found
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    
  /lectures/{lect_id}/assignments/{a_id}/grading:
    get:
      security:
        - hub_auth:
          - instructor
          - tutor
      summary: List student submissions of a lecture
      tags:
      - Grading
      parameters:
        - name: lect_id
          in: path
          description: ID of the lecture
          required: true
          example: 1
          schema:
            type: integer
            format: int64
        - name: a_id
          in: path
          description: ID of the assignment in the lecture
          required: true
          example: 2
          schema:
            type: integer
            format: int64
        - name: metadata_only
          in: query
          description: Only return the metadata information of the submissions
          required: false
          example: false
          schema:
            type: boolean
            default: false
        - name: latest
          in: query
          description: Only return the latest submission of each student
          required: false
          schema:
            type: boolean
            default: false
        - name: student_id
          in: query
          description: Specify the student id
          required: false
          example: 2
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  n_submissions:
                    type: integer
                    format: int64
                    example: 42
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        student:
                          $ref: "#/components/schemas/User"
                        submissions:
                          type: "array"
                          items:
                            type: object
                            properties:
                              submission:
                                $ref: "#/components/schemas/Submission"
                              grading_result:
                                $ref: "#/components/schemas/GradingResult"
        403:
          description: Unautorized
        404:
          description: Lecture id or assignment id not found
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /lectures/{lect_id}/assignments/{a_id}/grading/{student_id}/auto:
    post:
      security:
        - hub_auth:
          - instructor
          - tutor
      summary: Request the latest submission to be autograded
      tags:
      - Grading
      parameters:
        - name: lect_id
          in: path
          description: ID of the lecture
          required: true
          example: 1
          schema:
            type: integer
            format: int64
        - name: a_id
          in: path
          description: ID of the assignment in the lecture
          required: true
          example: 2
          schema:
            type: integer
            format: int64
        - name: student_id
          in: path
          description: ID of the student that is enroled in the lecture
          required: true
          example: "12345678"
          schema:
            type: "string"
        - name: submission_id
          in: query
          description: Specify the submission that should be autograded instead of latest
          required: false
          example: 2
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Assignment"
        403:
          description: Unautorized
        404:
          description: Lecture id, assignment id, student id or submission id not found
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /lectures/{lect_id}/assignments/{a_id}/grading/{student_id}/manual:
    post:
      security:
        - hub_auth:
          - instructor
          - tutor
      summary: Create new manual feedback for an assignment
      tags:
      - Grading
      parameters:
        - name: lect_id
          in: path
          description: ID of the lecture
          required: true
          example: 1
          schema:
            type: integer
            format: int64
        - name: a_id
          in: path
          description: ID of the assignment in the lecture
          required: true
          example: 2
          schema:
            type: integer
            format: int64
        - name: student_id
          in: path
          description: ID of the student that is enroled in the lecture
          required: true
          example: "12345678"
          schema:
            type: "string"
        - name: submission_id
          in: query
          description: Specify the the submission that should be manually graded instead of latest
          required: false
          example: 2
          schema:
            type: integer
            format: int64
      requestBody:
        description: The content of the manual grading.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualGradingContent'
      responses:
        200:
          description: OK
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ManualGradingContent"
        403:
          description: Unautorized
        404:
          description: Lecture id, assignment id, student id or submission id not found
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    get:
      security:
        - hub_auth:
          - instructor
          - tutor
      summary: Return the manual feedback of a graded assignment
      tags:
      - Grading
      parameters:
        - name: lect_id
          in: path
          description: ID of the lecture
          required: true
          example: 1
          schema:
            type: integer
            format: int64
        - name: a_id
          in: path
          description: ID of the assignment in the lecture
          required: true
          example: 2
          schema:
            type: integer
            format: int64
        - name: student_id
          in: path
          description: ID of the student that is enroled in the lecture
          required: true
          example: "12345678"
          schema:
            type: "string"
        - name: submission_id
          in: query
          description: Specify the the submission that should be manually graded instead of latest
          required: false
          example: 2
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ManualGradingContent"
        403:
          description: Unautorized
        404:
          description: Lecture id, assignment id, student id or submission id not found
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    put:
      security:
        - hub_auth:
          - instructor
          - tutor
      summary: Update the manual feedback for an assignment
      tags:
      - Grading
      parameters:
        - name: lect_id
          in: path
          description: ID of the lecture
          required: true
          example: 1
          schema:
            type: integer
            format: int64
        - name: a_id
          in: path
          description: ID of the assignment in the lecture
          required: true
          example: 2
          schema:
            type: integer
            format: int64
        - name: student_id
          in: path
          description: ID of the student that is enroled in the lecture
          required: true
          example: "12345678"
          schema:
            type: "string"
        - name: submission_id
          in: query
          description: Specify the the submission that should be manually graded instead of latest
          required: false
          example: 2
          schema:
            type: integer
            format: int64
      requestBody:
        description: The content of the manual grading to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualGradingContent'
      responses:
        200:
          description: OK
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ManualGradingContent"
        403:
          description: Unautorized
        404:
          description: Lecture id, assignment id, student id or submission id not found
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    delete:
      security:
        - hub_auth:
          - instructor
          - tutor
      summary: Delete the manual feedback for an assignment
      tags:
      - Grading
      parameters:
        - name: lect_id
          in: path
          description: ID of the lecture
          required: true
          example: 1
          schema:
            type: integer
            format: int64
        - name: a_id
          in: path
          description: ID of the assignment in the lecture
          required: true
          example: 2
          schema:
            type: integer
            format: int64
        - name: student_id
          in: path
          description: ID of the student that is enroled in the lecture
          required: true
          example: "12345678"
          schema:
            type: "string"
        - name: submission_id
          in: query
          description: Specify the the submission that should be manually graded instead of latest
          required: false
          example: 2
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
        403:
          description: Unautorized
        404:
          description: Lecture id, assignment id, student id or submission id not found
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              
  /lectures/{lect_id}/assignments/{a_id}/grading/{student_id}/score:
    get:
      security:
        - hub_auth:
          - instructor
          - tutor
          - student
      summary: Return the score of an assignment
      tags:
      - Grading
      parameters:
        - name: lect_id
          in: path
          description: ID of the lecture
          required: true
          example: 1
          schema:
            type: integer
            format: int64
        - name: a_id
          in: path
          description: ID of the assignment in the lecture
          required: true
          example: 2
          schema:
            type: integer
            format: int64
        - name: student_id
          in: path
          description: ID of the student that is enroled in the lecture
          required: true
          example: "12345678"
          schema:
            type: "string"
        - name: submission_id
          in: query
          description: Specify the the submission that should be returned instead of latest
          required: false
          example: 2
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GradingResult"
        403:
          description: Unautorized
        404:
          description: Lecture id, assignment id, student id or submission id not found
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"


###### Data type definitions
components:
  schemas:
    User:
      type: "object"
      properties:
        id: 
          type: "string" # tuwel id
          example: "12345678"
        name:
          type: "string"
          example: "Baz Bar"
      example:
        id: "12345678"
        name: "Baz Bar"
    Lecture:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
        name:
          type: "string"
          example: "Informationsvisualisierung"
        code:
          type: "string"
          example: "ivs21"
        complete:
          type: "boolean"
          default: false
        semester:
          type: "string"
          example: "SS21"
      example:
        id: 1
        name: "Informationsvisualisierung"
        code: "ivs21"
        complete: false
        semester: "SS21"
    Assignment:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
          example: "assignment_1"
        exercises:
          type: "array"
          items:
            $ref: "#/components/schemas/Exercise"
        files:
          type: "array"
          items:
            $ref: "#/components/schemas/AssignmentFile"
        due_date:
          type: "string"
          format: "date-time"
          example: "2021-07-21T23:55:00Z"
        path:
          type: "string"
          example: "~/assignment_1/"
        status:
          type: string
          enum:
            - created # another state of an assignment (instructor only)
            - released
            - fetched
            - complete # final state -> final grade is calculated
      example:
        id: 1
        name: "assignment_1"
        exercises: [
          $ref: "#/components/schemas/Exercise/example",
          $ref: "#/components/schemas/Exercise/example"
        ]
        files: [
          $ref: "#/components/schemas/AssignmentFile/example"
        ]
        due_date: "2021-07-21T23:55:00Z"
        path: "~/assignment_1/"
        status: "released"
    Exercise:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        a_id:
          type: "integer"
          format: "int64"
        name:
          type: string
          example: "exercise_1.ipynb"
        ex_type:
          type: string
          enum:
          - nbgrader # TODO: add more exercise types
        points:
          type: number
          format: float
      example:
        id: 0
        a_id: 1
        name: "exercise_1.ipynb"
        ex_type: "nbgrader"
        points: 0.0
    Submission:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        submitted_at:
          type: "string"
          format: "date-time"
          example: "2021-07-21T11:53:07Z"
        status:
          type: string
          enum:
            - not_graded
            - automatically_graded
            - manually_graded
      example:
        id: 2
        submitted_at: "2021-07-21T11:53:07Z"
        status: "not_graded"
    Feedback:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        submission_id:
          type: "integer"
          format: "int64"
        path:
          type: "string"
          example: "~/assignment_1/feedback/..."
      example:
        id: 0
        submission_id: 2
        path: "~/assignment_1/feedback/..."
    ValidationResult:
      type: "object"
      properties:
        status:
          type: string
          enum:
            - passed
            - failed
        validation_errors:
          type: array
          items:
            type: object
            properties:
              error_line:
                type: string
                example: "assert(id(2)==2)"
              error_output:
                type: string
                example: "NotImplementedError at line ..."
      example:
        status: "passed"
        validation_errors: [
          {
            error_line: "assert(id(2)==2)",
            error_output: "NotImplementedError at line ..."
          }
        ]
    GradingResult:
      type: "object"
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          enum:
          - needs_auto_grading
          - needs_manual_grading
          - completed
        autograde_score:
          type: number
          format: float
        total_score:
          type: number
          format: float
      example:
        id: 4
        status: "needs_auto_grading"
        autograde_score: 0.0
        total_score: 0.0
    ManualGradingContent:
      type: object
      properties: # TODO: use in api
        id:
          type: integer
          format: int64
        feedback_cells:
          type: array
          items:
            type: object
            properties:
              cell_id:
                type: integer
                format: int64
                example: 0
              feedback:
                type: string
      example:
        id: 0
        feedback_cells: [
          {
            cell_id: 0,
            feedback: "Very good!"
          }
        ]
    AssignmentFile:
      type: object
      properties:
        name:
          type: string
          example: "dataset.csv"
      example:
        name: "dataset.csv"
    ErrorMessage:
      type: "object"
      properties:
        msg:
          type: "string"
          example: "Some very detailed error message."
      example:
        msg: "Some very detailed error message."
    UserSubmissions:
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/User"
        submissions:
          type: "array"
          items:
            $ref: "#/components/schemas/Submission"
    UserFeedback:
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/User"
        submissions:
          type: "array"
          items:
            $ref:  "#/components/schemas/Feedback"

  securitySchemes:
    hub_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://auth.hub.something.tuwien.ac.at
          scopes:
            instructor: instructor of a lecture
            tutuor: tutor of a lecture
            student: student of a lecture
      x-tokenInfoFunc: __main__.token_info
