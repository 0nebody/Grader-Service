# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GradingResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, status: str=None, autograde_score: float=None, total_score: float=None):  # noqa: E501
        """GradingResult - a model defined in Swagger

        :param id: The id of this GradingResult.  # noqa: E501
        :type id: int
        :param status: The status of this GradingResult.  # noqa: E501
        :type status: str
        :param autograde_score: The autograde_score of this GradingResult.  # noqa: E501
        :type autograde_score: float
        :param total_score: The total_score of this GradingResult.  # noqa: E501
        :type total_score: float
        """
        self.swagger_types = {
            'id': int,
            'status': str,
            'autograde_score': float,
            'total_score': float
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'autograde_score': 'autograde_score',
            'total_score': 'total_score'
        }
        self._id = id
        self._status = status
        self._autograde_score = autograde_score
        self._total_score = total_score

    @classmethod
    def from_dict(cls, dikt) -> 'GradingResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GradingResult of this GradingResult.  # noqa: E501
        :rtype: GradingResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this GradingResult.


        :return: The id of this GradingResult.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this GradingResult.


        :param id: The id of this GradingResult.
        :type id: int
        """

        self._id = id

    @property
    def status(self) -> str:
        """Gets the status of this GradingResult.


        :return: The status of this GradingResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this GradingResult.


        :param status: The status of this GradingResult.
        :type status: str
        """
        allowed_values = ["needs_auto_grading", "needs_manual_grading", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def autograde_score(self) -> float:
        """Gets the autograde_score of this GradingResult.


        :return: The autograde_score of this GradingResult.
        :rtype: float
        """
        return self._autograde_score

    @autograde_score.setter
    def autograde_score(self, autograde_score: float):
        """Sets the autograde_score of this GradingResult.


        :param autograde_score: The autograde_score of this GradingResult.
        :type autograde_score: float
        """

        self._autograde_score = autograde_score

    @property
    def total_score(self) -> float:
        """Gets the total_score of this GradingResult.


        :return: The total_score of this GradingResult.
        :rtype: float
        """
        return self._total_score

    @total_score.setter
    def total_score(self, total_score: float):
        """Sets the total_score of this GradingResult.


        :param total_score: The total_score of this GradingResult.
        :type total_score: float
        """

        self._total_score = total_score
