# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from grader.common.models.base_model_ import Model
from grader.common import util


class ManualGradingContentFeedbackCells(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cell_id=None, feedback=None):  # noqa: E501
        """ManualGradingContentFeedbackCells - a model defined in OpenAPI

        :param cell_id: The cell_id of this ManualGradingContentFeedbackCells.  # noqa: E501
        :type cell_id: int
        :param feedback: The feedback of this ManualGradingContentFeedbackCells.  # noqa: E501
        :type feedback: str
        """
        self.openapi_types = {
            'cell_id': int,
            'feedback': str
        }

        self.attribute_map = {
            'cell_id': 'cell_id',
            'feedback': 'feedback'
        }

        self._cell_id = cell_id
        self._feedback = feedback

    @classmethod
    def from_dict(cls, dikt) -> 'ManualGradingContentFeedbackCells':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ManualGradingContent_feedback_cells of this ManualGradingContentFeedbackCells.  # noqa: E501
        :rtype: ManualGradingContentFeedbackCells
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cell_id(self):
        """Gets the cell_id of this ManualGradingContentFeedbackCells.


        :return: The cell_id of this ManualGradingContentFeedbackCells.
        :rtype: int
        """
        return self._cell_id

    @cell_id.setter
    def cell_id(self, cell_id):
        """Sets the cell_id of this ManualGradingContentFeedbackCells.


        :param cell_id: The cell_id of this ManualGradingContentFeedbackCells.
        :type cell_id: int
        """

        self._cell_id = cell_id

    @property
    def feedback(self):
        """Gets the feedback of this ManualGradingContentFeedbackCells.


        :return: The feedback of this ManualGradingContentFeedbackCells.
        :rtype: str
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this ManualGradingContentFeedbackCells.


        :param feedback: The feedback of this ManualGradingContentFeedbackCells.
        :type feedback: str
        """

        self._feedback = feedback
