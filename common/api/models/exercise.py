# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api import util


class Exercise(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, a_id=None, name=None, ex_type=None, points=None):  # noqa: E501
        """Exercise - a model defined in OpenAPI

        :param id: The id of this Exercise.  # noqa: E501
        :type id: int
        :param a_id: The a_id of this Exercise.  # noqa: E501
        :type a_id: int
        :param name: The name of this Exercise.  # noqa: E501
        :type name: str
        :param ex_type: The ex_type of this Exercise.  # noqa: E501
        :type ex_type: str
        :param points: The points of this Exercise.  # noqa: E501
        :type points: float
        """
        self.openapi_types = {
            'id': int,
            'a_id': int,
            'name': str,
            'ex_type': str,
            'points': float
        }

        self.attribute_map = {
            'id': 'id',
            'a_id': 'a_id',
            'name': 'name',
            'ex_type': 'ex_type',
            'points': 'points'
        }

        self._id = id
        self._a_id = a_id
        self._name = name
        self._ex_type = ex_type
        self._points = points

    @classmethod
    def from_dict(cls, dikt) -> 'Exercise':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Exercise of this Exercise.  # noqa: E501
        :rtype: Exercise
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Exercise.


        :return: The id of this Exercise.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Exercise.


        :param id: The id of this Exercise.
        :type id: int
        """

        self._id = id

    @property
    def a_id(self):
        """Gets the a_id of this Exercise.


        :return: The a_id of this Exercise.
        :rtype: int
        """
        return self._a_id

    @a_id.setter
    def a_id(self, a_id):
        """Sets the a_id of this Exercise.


        :param a_id: The a_id of this Exercise.
        :type a_id: int
        """

        self._a_id = a_id

    @property
    def name(self):
        """Gets the name of this Exercise.


        :return: The name of this Exercise.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Exercise.


        :param name: The name of this Exercise.
        :type name: str
        """

        self._name = name

    @property
    def ex_type(self):
        """Gets the ex_type of this Exercise.


        :return: The ex_type of this Exercise.
        :rtype: str
        """
        return self._ex_type

    @ex_type.setter
    def ex_type(self, ex_type):
        """Sets the ex_type of this Exercise.


        :param ex_type: The ex_type of this Exercise.
        :type ex_type: str
        """
        allowed_values = ["nbgrader"]  # noqa: E501
        if ex_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ex_type` ({0}), must be one of {1}"
                .format(ex_type, allowed_values)
            )

        self._ex_type = ex_type

    @property
    def points(self):
        """Gets the points of this Exercise.


        :return: The points of this Exercise.
        :rtype: float
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this Exercise.


        :param points: The points of this Exercise.
        :type points: float
        """

        self._points = points
